#!/usr/bin/env python2

import sys, socket, select, time, json, random

class server:
    # type is one of follower, candidate, or leader
    type = None
    # leader id of the sever
    leader_id = None
    # my id
    my_id = None
    # replica ids
    replica_ids = None
    # current commit id, updated by leader
    commit_id = None
    # records of transactions
    log = None
    # local database -> data is generated by log
    # stored as key, data
    local_db = None
    # current term of the server
    current_term = None
    # ids received response from other servers
    received_ids = None
    # index of last applied log
    last_log_index = None
    # term of the last log entry
    last_log_term = None
    # sock connection
    sock = None
    # follower ids of who votes the server
    votes = None
    # last time
    last = None
    # index of the next log entry the leader will send to the follower
    next_index = None
    # last applied log index
    last_applied = None
    # the server I voted
    voted_for = None
    # terms I voted
    voted_terms = None
    # store msgs clients sent during election
    clients_msg = None
    # time of the retry period
    retry_timer = None
    # dict in leader to track the last log entry that the follower received
    last_log_entries = None


    def __init__(self, my_id, replica_ids):
        self.type = 'follower'
        self.my_id = my_id
        self.replica_ids = replica_ids
        # Connect to the network. All messages to/from other replicas and clients will
        # occur over this socket
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        self.sock.connect(my_id)
        self.leader_id = 'FFFF'
        self.local_db = {}
        self.current_term = 0
        self.log = []
        self.commit_id = -1
        self.received_ids = set()
        self.last_log_index = -1
        self.last_log_term = -1
        self.votes = set()
        self.votes_participants = set()
        self.last = time.time()
        self.next_index = -1
        self.voted_for = None
        self.voted_terms = set()
        self.clients_msg = []
        self.retry_timer = 0
        self.last_log_entries = {}

    def process_commands(self, msg):
        TYPE = msg['type']
        if TYPE == 'get':
            key = msg['key']
            # send response back to client
            if key in self.local_db.keys():
                value = self.local_db[key]
                response = {"src": self.my_id, "dst": msg["src"], "leader": self.my_id, "type": "ok",
                            "MID": msg['MID'], 'value': value}
                self.sock.sendall(json.dumps(response))

        elif TYPE == 'put':
            # put data into local database
            entry = {'src': msg['src'], 'term': self.current_term, 'MID': msg['MID'],
                     'key': msg['key'], 'value': msg['value'], 'entry_index': self.last_log_index + 1}

            self.log.append(entry)
            self.next_index = entry['entry_index']
            self.send_append_entry_rpc()
            self.retry_timer = time.time()
            self.last_log_term = self.current_term
            self.last_log_index = entry['entry_index']

    # if server is a leader, deal with received msg by using this method
    def leader_handle_msg(self, msg):
        # update the index of the next log entry the leader will send to follower
        TYPE = msg['type']
        if TYPE in ['get', 'put']:
            self.process_commands(msg)

        elif TYPE == "AppendEntries RPC" and msg['term'] > self.current_term:
            # when it is crashed, it receives other server's heartbeat
            self.type = 'follower'
            self.reset_votes()
            self.leader_id = msg['leader']
            self.current_term = msg['term']
            # if it is not heartbeat
            self.receive_APRPC(msg)

        elif TYPE == "AppendEntries response" and msg['term'] == self.current_term:
            # update follower's last received log entry index
            self.last_log_entries[msg['src']] = msg['lastLogIndex']
            if msg['lastLogIndex'] == self.last_log_index:
                # receive log response from other servers
                self.received_ids.add(msg['src'])
                # when majority receive its log entry
                if float(len(self.received_ids)) / len(self.replica_ids) >= 0.5:
                    self.received_ids = set()
                    if self.commit_id != self.last_log_index:
                        self.leader_commit(self.commit_id + 1, self.last_log_index + 1)

                    for replica_id in self.replica_ids:
                        commit = {"src": self.my_id, "dst": replica_id, "leader": self.my_id, "type": "Ready to Commit",
                                  "term": self.current_term, "commitId": self.commit_id}
                        self.sock.sendall(json.dumps(commit))

        elif TYPE == 'updateEntries request':
            last_log = msg['lastLogIndex']
            index = -1
            for i in range((len(self.log) - 1), -1, -1):
                if self.log[i]['entry_index'] == last_log:
                    index = i
            response = {'src': self.my_id, 'dst': msg['src'], 'leader': self.my_id, 'type': 'updateEntries',
                        'entries': self.log[(index + 1):(index + 25)], 'prevLogTerm': self.last_log_term}
            self.sock.sendall(json.dumps(response))

        elif TYPE == "RequestVote RPC" and msg['term'] > self.current_term:
            # vote for new round candidate
            self.current_term = msg['term']
            self.leader_id = 'FFFF'
            self.type = 'follower'
            if self.current_term not in self.voted_terms:
                self.voted_for = None
            self.receive_RequestVote_RPC(msg)

    def candidate_handle_msg(self, msg):
        TYPE = msg["type"]
        if TYPE == "RequestVote response" and msg['result']['term'] == self.current_term:
            self.votes_participants.add(msg['src'])

            if msg['result']['voteGranted']:
                self.votes.add(msg["src"])
                # if more than half followers vote for this candidate, it becomes leader
                if float(len(self.votes)) / len(self.replica_ids) >= 0.6:
                    # reinitialize votes
                    self.reset_votes()
                    self.type = 'leader'
                    self.leader_id = self.my_id
                    self.last_log_entries = {}

                    if len(self.log) != 0:
                        self.next_index = self.log[-1]['entry_index']
                    # initialize appendEntry RPC
                    self.send_heartbeat()
                    # deal with the msg received during election
                    for msg in self.clients_msg:
                        self.process_commands(msg)
                    self.clients_msg = []

        elif TYPE == "AppendEntries RPC" and msg['term'] >= self.current_term:
            # returns to follower
            self.type = 'follower'
            self.reset_votes()
            # update leader id
            self.leader_id = msg['leader']
            self.current_term = msg['term']
            # if it is not heartbeat
            self.receive_APRPC(msg)

        elif TYPE in ['get', 'put']:
            # send response back to client
            self.redirect_msg(msg)

        elif TYPE == "RequestVote RPC" and msg['term'] > self.current_term:
            # vote for new round candidate
            self.current_term = msg['term']
            self.leader_id = 'FFFF'
            self.type = 'follower'
            if self.current_term not in self.voted_terms:
                self.voted_for = None
            self.receive_RequestVote_RPC(msg)

        elif (TYPE == "Ready to Commit" and msg['term'] == self.current_term) and msg['commitId'] == self.last_log_index:
            self.follower_commit(msg['commitId'])

        elif TYPE == 'updateEntries':
            self.receive_update_entries(msg)

    def follower_handle_msg(self, msg):
        TYPE = msg["type"]
        # if follower receives request vote RPC
        if TYPE == "RequestVote RPC" and msg['term'] >= self.current_term:
            self.current_term = msg['term']
            self.leader_id = 'FFFF'
            if self.current_term not in self.voted_terms:
                self.voted_for = None
            self.receive_RequestVote_RPC(msg)

        elif TYPE in ['get', 'put']:
            self.redirect_msg(msg)

        # receive appendentries RPC from leader
        elif TYPE == "AppendEntries RPC" and msg['term'] >= self.current_term:
            # update leader id and term
            self.reset_votes()
            self.leader_id = msg['leader']
            self.current_term = msg['term']
            self.receive_APRPC(msg)

        elif (TYPE == "Ready to Commit" and msg['term'] >= self.current_term) and msg[
            'commitId'] == self.last_log_index:
            self.follower_commit(msg['commitId'])

        elif TYPE == 'updateEntries':
            self.receive_update_entries(msg)

    def reset_votes(self):
        self.voted_for = None
        self.votes = set()
        self.votes_participants = set()

    def receive_RequestVote_RPC(self, msg):
        if (msg['logLen'] >= len(self.log) and self.commit_id <= msg['commitId']) and \
                (self.voted_for == None) and msg['lastLogTerm'] >= self.last_log_term:
            self.voted_for = msg['candidateId']
            self.voted_terms.add(self.current_term)
            result = {"term": msg['term'], "voteGranted": True}
            msg = {"src": self.my_id, "dst": msg["candidateId"], "type": "RequestVote response", "result": result,
                   "leader": "FFFF"}
            self.sock.sendall(json.dumps(msg))

        else:
            if self.current_term not in self.voted_terms:
                self.type = 'candidate'
                # initialize another round of RequestVote RPCs
                # reinitialize votes
                self.current_term += 1
                self.voted_for = my_id
                self.votes.add(self.my_id)
                self.voted_terms.add(self.current_term)

                for replica_id in self.replica_ids:
                    request_vote_rpc = {"src": my_id, "dst": replica_id, "type": "RequestVote RPC",
                                        "term": self.current_term, "candidateId": self.my_id,
                                        "leader": 'FFFF', 'logLen': len(self.log), 'commitId': self.commit_id,
                                        'lastLogTerm': self.last_log_term}
                    self.sock.sendall(json.dumps(request_vote_rpc))

    def send_heartbeat(self):
        heartbeat = {"src": self.my_id, "dst": 'FFFF', "leader": self.my_id, "type": "AppendEntries RPC",
                     "term": self.current_term, 'commitId': self.commit_id, 'nextIndex': self.next_index,
                     "entry": None, "prevLogTerm": self.last_log_term}
        self.sock.sendall(json.dumps(heartbeat))

    def send_append_entry_rpc(self):
        rpc = {"src": self.my_id, "dst": 'FFFF', "leader": self.my_id, "type": "AppendEntries RPC",
               "term": self.current_term, "entry": self.log[-1],
               'commitId': self.commit_id, 'nextIndex': self.next_index, 'MID': self.log[-1]['MID'],
               "prevLogTerm": self.last_log_term}
        self.sock.sendall(json.dumps(rpc))

    def redirect_msg(self, msg):
        # if currently no leader, store msgs received from clients, and send to leader later
        if self.leader_id == 'FFFF':
            self.clients_msg.append(msg)
        else:
            # if there is a leader, redirect to leader directly
            response = {'src': self.my_id, 'dst': msg['src'], 'type': 'redirect', 'leader': self.leader_id,
                        'MID': msg['MID']}
            self.sock.sendall(json.dumps(response))

    def leader_commit(self, start, end):
        for i in range(start, end, 1):
            entry = self.log[i]
            self.local_db[entry['key']] = entry['value']
            # send response back to client
            response = {"src": self.my_id, "dst": entry["src"], "leader": self.my_id, "type": "ok",
                        "MID": entry["MID"]}
            self.sock.sendall(json.dumps(response))
        self.commit_id = self.last_log_index

    def follower_commit(self, leader_commit_id):
        if self.commit_id < leader_commit_id:
            for i in range(self.commit_id + 1, leader_commit_id + 1, 1):
                entry = self.log[i]
                self.local_db[entry['key']] = entry['value']
            # update commit id
            self.commit_id = leader_commit_id

    def receive_update_entries(self, msg):
        entries = msg['entries']
        if entries[0]['entry_index'] == self.last_log_index + 1 and self.last_log_term <= msg['prevLogTerm']:
            for entry in entries:
                self.log.append(entry)
            self.last_log_index = entries[-1]['entry_index']
        response = {'src': self.my_id, 'dst': self.leader_id, 'term': self.current_term,
                    'type': 'AppendEntries response', 'lastLogIndex': self.last_log_index,
                    'leader': self.leader_id}
        # send response back to leader
        self.sock.sendall(json.dumps(response))

    def receive_APRPC(self, msg):
        if msg['entry']:
            if (self.last_log_index == msg['commitId'] and self.last_log_term <= msg['prevLogTerm']) \
                    and self.commit_id < msg['commitId']:
                self.follower_commit(msg['commitId'])

            if self.last_log_index + 1 == msg['nextIndex']:
                self.log.append(msg['entry'])
                self.last_log_term = self.log[-1]['term']
                self.last_log_index = self.log[-1]['entry_index']
                # send response back to leader that it receives log
                response = {'src': self.my_id, 'dst': self.leader_id, 'term': self.current_term,
                            'type': 'AppendEntries response', 'lastLogIndex': self.last_log_index,
                            'leader': self.leader_id}
                # send response back to leader
                self.sock.sendall(json.dumps(response))
            elif self.last_log_index + 1 < msg['nextIndex']:
                # refuse new entry
                # send request to leader to get entries that it doesn't have

                request = {'src': self.my_id, 'dst': self.leader_id, 'term': self.current_term,
                           'type': 'updateEntries request', 'lastLogIndex': self.last_log_index,
                           'leader': self.leader_id, 'prevLogTerm': self.last_log_term}
                self.sock.sendall(json.dumps(request))

            else:
                index = 0
                # remove additional log entries compared to leader
                for i in range((len(self.log) - 1), -1, -1):
                    # if follower have entries more than leader, remove theses entries and let client know to resend
                    if self.log[i]['entry_index'] > msg['nextIndex']:
                        if self.log[i]['entry_index'] == msg['nextIndex']:
                            index = i
                            break
                self.log = self.log[:index]
                if len(self.log) != 0:
                    # update commit id
                    if self.commit_id > self.last_log_index:
                        self.commit_id = self.last_log_index
                    self.log.append(msg['entry'])
                    self.last_log_index = self.log[-1]['entry_index']
                else:
                    self.last_log_index = -1

                response = {'src': self.my_id, 'dst': self.leader_id, 'term': self.current_term,
                            'type': 'AppendEntries response', 'lastLogIndex': self.last_log_index,
                            'leader': self.leader_id}
                # send response back to leader
                self.sock.sendall(json.dumps(response))

        # if it receives heartbeat
        else:
            # commit things that leader already committed
            if self.last_log_index == msg['commitId'] and self.commit_id < msg['commitId']:
                self.follower_commit(msg['commitId'])
            # redirects msg it receives during election
            for msg in self.clients_msg:
                self.redirect_msg(msg)
            self.clients_msg = []

    def election(self):
        # when it's timeout, update last time
        self.received_ids = set()
        self.reset_votes()
        # increase term
        self.current_term += 1
        self.leader_id = 'FFFF'
        self.type = 'candidate'
        # initialize another round of RequestVote RPCs
        # reinitialize votes
        self.voted_for = my_id
        self.votes.add(self.my_id)
        self.voted_terms.add(self.current_term)

        for replica_id in self.replica_ids:
            request_vote_rpc = {"src": my_id, "dst": replica_id, "type": "RequestVote RPC",
                                "term": self.current_term, "candidateId": self.my_id,
                                "leader": 'FFFF', 'logLen': len(self.log), 'commitId': self.commit_id,
                                'lastLogTerm': self.last_log_term}
            self.sock.sendall(json.dumps(request_vote_rpc))

    def run(self):
        while True:
            rtimeout = random.randint(150, 300)
            timeout = rtimeout / float(1000)
            self.last = time.time()
            self.election()
            while time.time() - self.last < timeout:
                ready = select.select([self.sock], [], [], 0.1)[0]
                if self.sock in ready:
                    msg_raw = self.sock.recv(32768)
                    msg = json.loads(msg_raw)

                    if msg['type'] not in ['get', 'put']:
                        self.last = time.time()
                    if self.type == 'leader':
                        self.last = time.time()
                        self.leader_handle_msg(msg)
                        while time.time() - self.retry_timer > timeout / 2:
                            for replica_id, last_log_index in self.last_log_entries.items():
                                send_heartbeat = True
                                if last_log_index < self.last_log_index:
                                    index = -1
                                    for i in range((len(self.log) - 1), -1, -1):
                                        if self.log[i]['entry_index'] == last_log_index:
                                            index = i
                                            break
                                    response = {'src': self.my_id, 'dst': replica_id, 'leader': self.my_id,
                                                'type': 'updateEntries', 'prevLogTerm': self.last_log_term,
                                                'entries': self.log[(index + 1):(index + 25)]}
                                    send_heartbeat = False
                                    self.sock.sendall(json.dumps(response))

                                if send_heartbeat:
                                    heartbeat = {"src": self.my_id, "dst": replica_id, "leader": self.my_id,
                                                 "type": "AppendEntries RPC",
                                                 "term": self.current_term, 'commitId': self.commit_id,
                                                 'nextIndex': self.next_index,
                                                 "entry": None, "prevLogTerm": self.last_log_term}
                                    self.sock.sendall(json.dumps(heartbeat))
                            self.retry_timer = time.time()
                            self.last = time.time()

                    elif self.type == 'candidate':
                        self.candidate_handle_msg(msg)
                    else:
                        self.follower_handle_msg(msg)


if __name__ == '__main__':
    # Your ID number
    my_id = sys.argv[1]

    # The ID numbers of all the other replicas
    replica_ids = sys.argv[2:]

    server = server(my_id, replica_ids)
    server.run()
